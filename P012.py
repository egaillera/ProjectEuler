'''The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle 
number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?'''

import math
from time import time
from functools import reduce


'''
If factorization is x^a + y^b + z^c, with x,y,z primes, the number of divisors is (a+1)(b+1)(c+1)
This function compute prime factors and return the exponents to calculate number of divisors
Returns exponents and factors
'''
def prime_factors(n):
	
	ex = []
	f = []
	
	# If n can be factorized by 2, calculate the exponent
	# 2 is treated specially to setup range for odd numbers
	c = 0
	while n%2 == 0:
		#print('2')
		f.append(2)
		n = n/2
		c = c + 1
	if c > 0: ex.append(c)

	# Calulate factors and exponents in general, except 2	
	for i in range(3,int(math.sqrt(n))+1,2):
		c = 0
		while n%i == 0:
			#print(i)
			f.append(i)
			n = n/i
			c = c + 1 
		if c > 0: ex.append(c)	
			
	if n > 2:
		#print n
		ex.append(1)
		f.append(n)
		
	return ex,f	


def num_divisors(x):
	
	list_exp,factors = prime_factors(x)
	return reduce((lambda x, y: x * y),[x+1 for x in list_exp])
	
start = time() 

i = 3
buff = 3
curr_tri = 3
nd = 0

while nd <= 500:
	
	buff = buff + i
	curr_tri = buff
	
	nd = num_divisors(curr_tri)
	
	#print '%d has %d divisors' % (curr_tri,nd)
	
	i = i + 1

elapsed = time() - start                
print("Solution: {0} \t Time elapsed: {1}".format(curr_tri, elapsed))
	
